package otpgo

import (
	"math"
	"testing"
	"time"
)

func TestTOTP_Generate(t *testing.T) {
	t.Run("Normal Generation", testTOTPNormalGeneration)
	t.Run("Bad Key", testTOTPBadKey)
	t.Run("Default Params", testTOTPDefaultParams)
	t.Run("Autogenerated Key", testTOTPAutogeneratedKey)
	t.Run("Lower Case Key", testTOTPLowerCaseKey)
}

func testTOTPNormalGeneration(t *testing.T) {
	key := "73QK7D3A3PIZ6NUQQBF4BNFYQBRVUHUQ"

	totp := &TOTP{
		Key:       key,
		Period:    TOTPDefaultPeriod,
		Algorithm: HmacSHA256,
		Length:    Length6,
	}

	expectedOTP, err := getExpectedTOTP(key, TOTPDefaultPeriod, Length6, HmacSHA256)
	if err != nil {
		t.Errorf("unexpected error: %s", err)
		t.FailNow()
	}

	actualOTP, err := totp.Generate()
	if err != nil {
		t.Errorf("unexpected error: %s", err)
	}

	if actualOTP != expectedOTP {
		t.Errorf("wrong totp\nexpected: %s\n  actual: %s", expectedOTP, actualOTP)
	}
}

func testTOTPBadKey(t *testing.T) {
	totp := &TOTP{
		Key:       "invalid-base-32",
		Period:    TOTPDefaultPeriod,
		Algorithm: HmacSHA256,
		Length:    Length6,
	}

	_, err := totp.Generate()
	expectedErr := ErrorInvalidKey{msg: "illegal base32 data at input byte 7"}
	if err != expectedErr {
		t.Errorf("unexpected error: %s", err)
	}
}

func testTOTPDefaultParams(t *testing.T) {
	key := "73QK7D3A3PIZ6NUQQBF4BNFYQBRVUHUQ"
	expectedPeriod := TOTPDefaultPeriod
	expectedAlg := HmacSHA1
	expectedLength := Length6

	h := &TOTP{Key: key}

	expectedOTP, err := getExpectedTOTP(key, TOTPDefaultPeriod, Length6, HmacSHA1)
	if err != nil {
		t.Errorf("unexpected error: %s", err)
		t.FailNow()
	}

	otp, err := h.Generate()

	if err != nil {
		t.Errorf("unexpected error: %s", err)
	}

	if h.Period != expectedPeriod {
		t.Errorf("unexpected period\nexpected: %d\n  actual: %d", expectedPeriod, h.Period)
	}

	if h.Algorithm != expectedAlg {
		t.Errorf("unexpected hash algorithm\nexpected: %d (SHA1)\n  actual: %d", expectedAlg, h.Algorithm)
	}

	if h.Length != expectedLength {
		t.Errorf("unexpected length\nexpected: %d\n  actual: %d", expectedLength, h.Length)
	}

	if otp != expectedOTP {
		t.Errorf("unexpected totp\nexpected: %s\n  actual: %s", expectedOTP, otp)
	}
}

func testTOTPAutogeneratedKey(t *testing.T) {
	h := &TOTP{}

	_, err := h.Generate()

	if err != nil {
		t.Errorf("unexpected error: %s", err)
	}

	if h.Key == "" {
		t.Error("expected Key to be populated")
	}
}

func testTOTPLowerCaseKey(t *testing.T) {
	h := &TOTP{Key: "73qk7d3a3piz6nuqqbf4bnfyqbrvuhuq"}

	_, err := h.Generate()

	if err != nil {
		t.Errorf("unexpected error: %s", err)
	}

	if h.Key == "" {
		t.Error("expected Key to be populated")
	}
}

func getExpectedTOTP(key string, period int, length otpLength, algorithm hmacAlgorithm) (string, error) {
	timestamp := time.Now().Unix()
	counter := uint64(math.Floor(float64(timestamp) / float64(period)))
	expectedOTP, err := generateOTP(key, counter, length, algorithm)
	if err != nil {
		return "", err
	}

	return expectedOTP, nil
}
